plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'com.github.node-gradle.node' version '3.2.1'
}

group = 'com.luckyvicky'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withJavadocJar()
	withSourcesJar()
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'mysql:mysql-connector-java:8.0.28'
	compileOnly 'org.projectlombok:lombok'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	implementation 'org.mapstruct:mapstruct:1.5.1.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final'

	implementation 'org.modelmapper:modelmapper:3.1.0'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'net.coobird:thumbnailator:0.4.16'

	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// spring security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// jwt 0.12.3
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// 오브젝트 스토리지
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.58'

	// 언어 감지
	implementation 'com.cybozu.labs:langdetect:1.1-20120112'

	// json
	implementation 'org.json:json:20230227'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.session:spring-session-data-redis'

	// Elasticsearch dependencies
	implementation 'com.internetitem:logback-elasticsearch-appender:1.6'
	implementation 'dev.akkinoc.spring.boot:logback-access-spring-boot-starter:3.2.1'
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.10.0'
	implementation 'org.springframework.data:spring-data-elasticsearch:4.1.6'
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'

	// querydsl
//	implementation 'com.querydsl:querydsl-jpa:5.0.0'
//	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
//	compileOnly 'com.querydsl:querydsl-core:5.0.0'

	// Spring boot 3.x이상에서 QueryDsl 패키지를 정의하는 방법
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}


tasks.named('test') {
	useJUnitPlatform()
}

node {
	version = '16.13.0'
	npmVersion = '8.1.0'
	download = true
	workDir = file("${project.buildDir}/nodejs")
	npmWorkDir = file("${project.buildDir}/npm")
}

task cleanNpmCache(type: NpmTask) {
	args = ['cache', 'clean', '--force']
}

task appNpmInstall(type: NpmTask) {
	workingDir = file("${project.projectDir}/src/main/resources/static")
	args = ['install']
}

appNpmInstall.dependsOn(cleanNpmCache)
build.dependsOn(appNpmInstall)

tasks.withType(Test) {
	enabled = false
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', 'build/generated/source/apt/main']
		}
	}
}

tasks.withType(JavaCompile) {
	options.annotationProcessorPath = configurations.annotationProcessor
}
